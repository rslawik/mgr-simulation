class SLPreamble(Algorithm):
	def __init__(self, distribution, log):
		super(SLPreamble, self).__init__(distribution, log)
		self.preamble, self.gamma = [], int(self.distribution.packets[-1] / self.distribution.packets[0])

	def schedule(self):
		if not self.preamble and self.queue[self.distribution.packets[0]] >= self.gamma:
			self.preamble = [self.distribution.packets[0]] * self.gamma
		elif self.preamble:
			nextPacket = self.preamble.pop()
			return self.schedulePacket(nextPacket)
		elif self.queue[self.distribution.packets[-1]]:
			return self.schedulePacket(self.distribution.packets[-1])
